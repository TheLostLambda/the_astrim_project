/* Fill in the Num trait for this function so that I can work with large numbers without losing precision
   Also check that i64 is the best type here. I fear that the i64 on the base is more than could ever be useful
   when limited to a 64-bit power.
#[derive(Debug)]
struct SciNum {
    base: i64,
    power: i64
}
*/
//mod structs;
use std::collections::HashMap;
struct Universe(HashMap<u64,LSSB>); // This u64 should be changed to an autogenerated UUID ASAP and LSSB should be generalized

// Change f64s to SciNums
pub struct Point2 {
    pub x: f64,
    pub y: f64,
}

pub struct Vector2 {
    pub x: f64,
    pub y: f64,
}

#[derive(Debug)]
// Large Solar System Bodies (Planet or Dwarf Planet)
// These objects are approximated as spherical with their center of mass located in their core.
struct LSSB {
    //universe: &Universe,
    mass: u64, // This will be a SciNum in the future
    radius: u64, // Overkill?
    position: (f64, f64), // (X,Y)
    velocity: (f64, f64), // (X,Y)
}
